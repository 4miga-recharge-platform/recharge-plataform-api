generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id              String                 @id @default(uuid())
  name            String
  email           String                 @unique
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  bannersUrl      String[]
  faviconUrl      String?
  logoUrl         String?
  miniLogoUrl     String?
  onSaleUrlImg    String?
  facebookUrl     String?
  instagramUrl    String?
  tiktokUrl       String?
  wppNumber       String?                @unique
  domain          String                 @unique
  coupons         Coupon[]
  influencers     Influencer[]
  orders          Order[]
  packages        Package[]
  productSettings StoreProductSettings[]
  users           User[]
}

model Influencer {
  id            String                   @id @default(uuid())
  name          String
  email         String?
  phone         String?
  paymentMethod String?
  paymentData   String?
  isActive      Boolean                  @default(true)
  storeId       String
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  coupons       Coupon[]
  store         Store                    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  monthlySales  InfluencerMonthlySales[]

  @@unique([name, storeId])
}

model InfluencerMonthlySales {
  id           String     @id @default(uuid())
  influencerId String
  month        Int
  year         Int
  totalSales   Decimal    @default(0) @db.Decimal(10, 2)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@unique([influencerId, month, year])
}

model User {
  id                       String         @id @default(uuid())
  name                     String
  email                    String
  phone                    String
  password                 String
  documentType             IndividualType
  documentValue            String
  role                     UserRole       @default(USER)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  storeId                  String
  resetPasswordCode        String?
  resetPasswordExpires     DateTime?
  emailConfirmationCode    String?
  emailVerified            Boolean        @default(false)
  emailConfirmationExpires DateTime?
  orders                   Order[]
  store                    Store          @relation(fields: [storeId], references: [id])

  @@unique([email, storeId])
  @@unique([documentValue, storeId])
}

model Product {
  id            String                 @id @default(uuid())
  name          String
  description   String
  instructions  String
  imgBannerUrl  String
  imgCardUrl    String
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  packages      Package[]
  storeSettings StoreProductSettings[]
}

model StoreProductSettings {
  id           String   @id @default(uuid())
  storeId      String
  productId    String
  description  String?
  instructions String?
  imgBannerUrl String?
  imgCardUrl   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  store        Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([storeId, productId])
}

model Package {
  id             String          @id @default(uuid())
  name           String
  amountCredits  Int
  imgCardUrl     String
  isOffer        Boolean         @default(false)
  basePrice      Decimal         @db.Decimal(10, 2)
  productId      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  storeId        String
  isActive       Boolean         @default(true)
  product        Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  store          Store           @relation(fields: [storeId], references: [id])
  paymentMethods PaymentMethod[]
}

model PaymentMethod {
  id        String            @id @default(uuid())
  name      PaymentMethodName
  price     Decimal           @db.Decimal(10, 2)
  packageId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  package   Package           @relation(fields: [packageId], references: [id], onDelete: Cascade)
}

model Order {
  id            String         @id @default(uuid())
  orderNumber   String         @unique
  price         Decimal        @db.Decimal(10, 2)
  orderStatus   OrderStatus
  paymentId     String         @unique
  orderItemId   String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  storeId       String
  userId        String
  bigoRecharges BigoRecharge[]
  couponUsages  CouponUsage[]
  orderItem     OrderItem      @relation(fields: [orderItemId], references: [id])
  payment       Payment        @relation(fields: [paymentId], references: [id])
  store         Store          @relation(fields: [storeId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
}

model Payment {
  id                  String        @id @default(uuid())
  name                String
  status              PaymentStatus
  statusUpdatedAt     DateTime?
  qrCode              String?
  qrCodetextCopyPaste String?
  order               Order?
}

model OrderItem {
  id          String      @id @default(uuid())
  productId   String
  productName String
  rechargeId  String      @unique
  packageId   String      @unique
  order       Order?
  package     PackageInfo @relation(fields: [packageId], references: [id])
  recharge    Recharge    @relation(fields: [rechargeId], references: [id])
}

model Recharge {
  id                String         @id @default(uuid())
  userIdForRecharge String
  status            RechargeStatus
  amountCredits     Int
  statusUpdatedAt   DateTime?
  orderItem         OrderItem?
}

model PackageInfo {
  id                String     @id @default(uuid())
  packageId         String
  name              String
  userIdForRecharge String
  imgCardUrl        String
  orderItem         OrderItem?
}

model BigoRecharge {
  id           String             @id @default(uuid())
  seqid        String             @unique
  buOrderId    String?            @unique
  endpoint     String
  status       BigoRechargeStatus
  rescode      Int?
  message      String?
  requestBody  Json
  responseBody Json?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  orderId      String?
  attempts     Int                @default(0)
  nextRetry    DateTime?
  order        Order?             @relation(fields: [orderId], references: [id])
}

model Coupon {
  id                 String        @id @default(uuid())
  title              String
  discountPercentage Decimal?      @db.Decimal(5, 2)
  discountAmount     Decimal?      @db.Decimal(10, 2)
  expiresAt          DateTime?
  timesUsed          Int           @default(0)
  totalSalesAmount   Decimal       @default(0) @db.Decimal(10, 2)
  maxUses            Int?
  minOrderAmount     Decimal?      @db.Decimal(10, 2)
  isActive           Boolean       @default(true)
  storeId            String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  influencerId       String
  isFirstPurchase    Boolean       @default(false)
  influencer         Influencer    @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  store              Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  couponUsages       CouponUsage[]

  @@unique([title, storeId])
}

model CouponUsage {
  id       String   @id @default(uuid())
  couponId String
  orderId  String
  usedAt   DateTime @default(now())
  coupon   Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([couponId, orderId])
}

enum BigoRechargeStatus {
  REQUESTED
  SUCCESS
  FAILED
  RETRY_PENDING
}

enum UserRole {
  MASTER_ADMIN_4MIGA_USER
  RESELLER_ADMIN_4MIGA_USER
  USER
}

enum OrderStatus {
  CREATED
  PROCESSING
  COMPLETED
  EXPIRED
  REFOUNDED
}

enum PaymentStatus {
  PAYMENT_PENDING
  PAYMENT_APPROVED
  PAYMENT_REJECTED
}

enum RechargeStatus {
  RECHARGE_PENDING
  RECHARGE_APPROVED
  RECHARGE_REJECTED
}

enum PaymentMethodName {
  pix
  mercado_pago
  picpay
  paypal
  boleto
  transferencia
}

enum IndividualType {
  cpf
  cnpj
}
