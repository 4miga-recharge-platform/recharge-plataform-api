// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String         @id @default(uuid())
  name          String
  email         String         @unique
  phone         String
  password      String
  documentType  IndividualType
  documentValue String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Product {
  id           String    @id @default(uuid())
  name         String
  description  String
  instructions String
  imgBannerUrl String
  imgCardUrl   String
  packages     Package[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Package {
  id             String          @id @default(uuid())
  name           String
  amountCredits  Int
  imgCardUrl     String
  isOffer        Boolean         @default(false)
  basePrice      Float
  productId      String
  product        Product         @relation(fields: [productId], references: [id])
  paymentMethods PaymentMethod[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model PaymentMethod {
  id        String            @id @default(uuid())
  name      PaymentMethodName
  price     Float
  packageId String
  package   Package           @relation(fields: [packageId], references: [id])
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Order {
  id          String      @id @default(uuid())
  orderNumber String      @unique
  totalAmount Int
  orderStatus OrderStatus
  payment     Payment     @relation(fields: [paymentId], references: [id])
  paymentId   String      @unique
  orderItem   OrderItem   @relation(fields: [orderItemId], references: [id])
  orderItemId String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Payment {
  id                  String        @id @default(uuid())
  name                String
  status              PaymentStatus
  statusUpdatedAt     DateTime?
  qrCode              String?
  qrCodetextCopyPaste String?

  Order Order[]
}

model OrderItem {
  id          String      @id @default(uuid())
  productId   String
  productName String
  recharge    Recharge    @relation(fields: [rechargeId], references: [id])
  rechargeId  String      @unique
  package     PackageInfo @relation(fields: [packageId], references: [id])
  packageId   String      @unique

  Order Order[]
}

model Recharge {
  id                String         @id @default(uuid())
  userIdForRecharge String
  status            RechargeStatus
  amountCredits     Int
  statusUpdatedAt   DateTime?
  OrderItem OrderItem[]
}

model PackageInfo {
  id                String         @id @default(uuid())
  packageId         String
  name              String
  userIdForRecharge String
  imgCardUrl        String
  OrderItem OrderItem[]
}

enum OrderStatus {
  CREATED
  PROCESSING
  COMPLETED
  EXPIRED
  REFOUNDED
}

enum PaymentStatus {
  PAYMENT_PENDING
  PAYMENT_APPROVED
  PAYMENT_REJECTED
}

enum RechargeStatus {
  RECHARGE_PENDING
  RECHARGE_APPROVED
  RECHARGE_REJECTED
}

enum PaymentMethodName {
  pix
  mercado_pago
  picpay
  paypal
  boleto
  transferencia
}

enum IndividualType {
  cpf
  cnpj
}
